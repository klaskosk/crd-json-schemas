{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "title": "ClusterTemplate",
  "description": "ClusterTemplate is a resource that defines a template for a cluster.",
  "x-SPDX-License-Identifier": "Apache-2.0",
  "x-SPDX-FileCopyRightText": "Red Hat",
  "additionalProperties": false,
  "properties": {
    "apiVersion": {
      "type": "string",
      "enum": ["clcm.openshift.io/v1alpha1"]
    },
    "kind": {
      "type": "string",
      "enum": ["ClusterTemplate"]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": true
    },
    "spec": {
      "type": "object",
      "additionalProperties": false,
      "required": ["name", "release", "templateParameterSchema", "templates", "version"],
      "properties": {
        "characteristics": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Characteristics defines a List of key/value pairs describing characteristics associated with the template."
        },
        "description": {
          "type": "string",
          "description": "Description defines a Human readable description of the Template."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata defines a List of key/value pairs describing metadata associated with the template."
        },
        "name": {
          "type": "string",
          "description": "Name defines a Human readable name of the Template."
        },
        "release": {
          "type": "string",
          "description": "Release defines the openshift release version of the template"
        },
        "templateId": {
          "type": "string",
          "description": "TemplateId defines a Identifier for the O-Cloud Template. This identifier is allocated by the O-Cloud."
        },
        "templateParameterSchema": {
          "type": "object",
          "description": "TemplateParameterSchema defines the parameters required for ClusterTemplate. The parameter definitions should follow the OpenAPI V3 schema and explicitly define required fields."
        },
        "templates": {
          "type": "object",
          "additionalProperties": false,
          "required": ["clusterInstanceDefaults", "policyTemplateDefaults"],
          "properties": {
            "clusterInstanceDefaults": {
              "type": "string",
              "description": "ClusterInstanceDefaults defines a reference to a configmap with default values for ClusterInstance"
            },
            "hwTemplate": {
              "type": "string",
              "description": "HwTemplate defines a reference to a HardwareTemplate resource"
            },
            "policyTemplateDefaults": {
              "type": "string",
              "description": "PolicyTemplateDefaults defines a reference to a configmap with default values for ACM policies"
            },
            "upgradeDefaults": {
              "type": "string",
              "description": "UpgradeDefaults defines a reference to a configmap with default values for upgrade information"
            }
          },
          "description": "Templates defines the references to the templates required for ClusterTemplate."
        },
        "version": {
          "type": "string",
          "description": "Version defines a version or generation of the resource as defined by its provider."
        }
      },
      "description": "ClusterTemplateSpec defines the desired state of ClusterTemplate"
    },
    "status": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "required": ["lastTransitionTime", "message", "reason", "status", "type"],
            "properties": {
              "lastTransitionTime": {
                "type": "string",
                "format": "date-time",
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable."
              },
              "message": {
                "type": "string",
                "maxLength": 32768,
                "description": "message is a human readable message indicating details about the transition. This may be an empty string."
              },
              "observedGeneration": {
                "type": "integer",
                "format": "int64",
                "minimum": 0,
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance."
              },
              "reason": {
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty."
              },
              "status": {
                "type": "string",
                "enum": ["True", "False", "Unknown"],
                "description": "status of the condition, one of True, False, Unknown."
              },
              "type": {
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)"
              }
            }
          }
        }
      },
      "description": "ClusterTemplateStatus defines the observed state of ClusterTemplate"
    }
  },
  "required": ["apiVersion", "kind", "spec"]
}
